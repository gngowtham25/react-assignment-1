{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","require","default","App","useState","tableData","updateTableData","searchText","updateSearchText","detailData","updateDetailData","sourceData","updateSourceData","useEffect","get","then","res","console","log","data","filteredData","filter","eachTableData","firstName","toLowerCase","includes","id","src","alt","action","type","placeholder","name","value","onChange","e","target","className","length","map","eachRow","_index","Fragment","onClick","lastName","email","phone","Object","keys","cols","rows","readOnly","description","address","streetAddress","city","state","zip","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4662e1fa.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from \"react\"\nimport \"./App.css\";\nconst axios = require('axios').default;\n\nconst App = () => {\n  const url = 'http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D';\n\n  const [tableData, updateTableData] = useState([])\n  const [searchText, updateSearchText] = useState(\"\")\n  const [detailData, updateDetailData] = useState({})\n  const [sourceData, updateSourceData]= useState([])\n\n  useEffect(() => {\n    axios.get(url)\n      .then((res) => {\n        console.log(res.data)\n        updateSourceData(res.data)\n        updateTableData(res.data)\n      })\n  }, [])\n\n  useEffect(() => {\n    console.log(searchText)\n    if(searchText === \"\"){\n      updateTableData(sourceData)\n    } else {\n      let filteredData = sourceData.filter((eachTableData) => {\n        return (eachTableData.firstName.toLowerCase().includes(searchText.toLowerCase()))\n      })\n      updateTableData(filteredData)\n    }\n  }, [searchText])\n\n  return (\n    <>\n      <div id=\"overlay\">\n        <img src=\"./preloader.gif\" alt=\"Preloader icon\" />\n      </div>\n      <main>\n        <div id=\"table-section\">\n          <form action=\"/\">\n            <input type=\"text\" placeholder=\"Enter something\" name=\"search-box\" id=\"search-box\" value={searchText} onChange={(e) => { updateSearchText(e.target.value) }} />\n          </form>\n        </div>\n\n        <div id=\"table-wrapper\">\n          <div id=\"table-headers\">\n            <table>\n              <thead>\n                <tr>\n                  <th className=\"column1\">Id</th>\n                  <th className=\"column2\">FirstName</th>\n                  <th className=\"column3\">LastName</th>\n                  <th className=\"column4\">Email</th>\n                  <th className=\"column5\">Phone</th>\n                </tr>\n              </thead>\n            </table>\n          </div>\n\n          <div id=\"table-data\">\n            <table>\n              <tbody>\n                {\n                  tableData && tableData.length > 0 && tableData.map((eachRow, _index) => {\n                    return (\n                      <React.Fragment key={_index}>\n                        <tr className={detailData.id == eachRow.id ? 'data-row active': 'data-row'}  onClick={() => updateDetailData(eachRow)}>\n                          <td className=\"column1\">{eachRow.id}</td>\n                          <td className=\"column2\">{eachRow.firstName}</td>\n                          <td className=\"column3\">{eachRow.lastName}</td>\n                          <td className=\"column4\">{eachRow.email}</td>\n                          <td className=\"column5\">{eachRow.phone}</td>\n                        </tr>\n                      </React.Fragment>\n                    )\n                  })\n                }\n              </tbody>\n            </table>\n          </div>\n\n        </div>\n\n\n        <div id=\"info-wrapper\">\n          <h1>Details</h1>\n          <p>Click on a table item to get detailed information</p>\n          {\n            detailData && Object.keys(detailData).length > 0 ? <div id=\"info-content\">\n              <div><b>User selected:</b> {detailData.firstName} {detailData.lastName}</div>\n              <div>\n                <b>Description: </b>\n                <textarea cols=\"50\" rows=\"5\" readOnly value={detailData.description}>\n                </textarea> \n              </div>\n              <div><b>Address:</b> {detailData.address.streetAddress} </div>\n              <div><b>City:</b> {detailData.address.city}</div>\n              <div><b>State:</b> {detailData.address.state}</div>\n              <div><b>Zip:</b> {detailData.address.zip}</div>\n            </div> : null\n          }\n\n        </div>\n\n      </main>\n\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}